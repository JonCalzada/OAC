// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/31/2023 19:58:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Practica4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Practica4_vlg_sample_tst(
	AUX,
	CLK,
	RESET,
	W,
	X,
	Y,
	Z,
	sampler_tx
);
input  AUX;
input  CLK;
input  RESET;
input  W;
input  X;
input  Y;
input  Z;
output sampler_tx;

reg sample;
time current_time;
always @(AUX or CLK or RESET or W or X or Y or Z)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Practica4_vlg_check_tst (
	edoPresente,
	liga,
	prueba,
	Salida,
	sampler_rx
);
input [2:0] edoPresente;
input [2:0] liga;
input [2:0] prueba;
input [4:0] Salida;
input sampler_rx;

reg [2:0] edoPresente_expected;
reg [2:0] liga_expected;
reg [2:0] prueba_expected;
reg [4:0] Salida_expected;

reg [2:0] edoPresente_prev;
reg [2:0] liga_prev;
reg [2:0] prueba_prev;
reg [4:0] Salida_prev;

reg [2:0] edoPresente_expected_prev;
reg [2:0] liga_expected_prev;
reg [2:0] prueba_expected_prev;
reg [4:0] Salida_expected_prev;

reg [2:0] last_edoPresente_exp;
reg [2:0] last_liga_exp;
reg [2:0] last_prueba_exp;
reg [4:0] last_Salida_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	edoPresente_prev = edoPresente;
	liga_prev = liga;
	prueba_prev = prueba;
	Salida_prev = Salida;
end

// update expected /o prevs

always @(trigger)
begin
	edoPresente_expected_prev = edoPresente_expected;
	liga_expected_prev = liga_expected;
	prueba_expected_prev = prueba_expected;
	Salida_expected_prev = Salida_expected;
end


// expected edoPresente[ 2 ]
initial
begin
	edoPresente_expected[2] = 1'bX;
end 
// expected edoPresente[ 1 ]
initial
begin
	edoPresente_expected[1] = 1'bX;
end 
// expected edoPresente[ 0 ]
initial
begin
	edoPresente_expected[0] = 1'bX;
end 
// expected liga[ 2 ]
initial
begin
	liga_expected[2] = 1'b0;
	liga_expected[2] = #5000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #20000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #30000 1'b1;
	liga_expected[2] = #10000 1'b0;
	liga_expected[2] = #5000 1'b1;
	liga_expected[2] = #15000 1'b0;
	liga_expected[2] = #10000 1'b1;
	liga_expected[2] = #10000 1'b0;
	liga_expected[2] = #5000 1'b1;
	liga_expected[2] = #10000 1'b0;
	liga_expected[2] = #30000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #5000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #10000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #15000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #35000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #10000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #5000 1'b1;
	liga_expected[2] = #10000 1'b0;
	liga_expected[2] = #5000 1'b1;
	liga_expected[2] = #10000 1'b0;
	liga_expected[2] = #10000 1'b1;
	liga_expected[2] = #10000 1'b0;
	liga_expected[2] = #30000 1'b1;
	liga_expected[2] = #15000 1'b0;
	liga_expected[2] = #5000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #5000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #20000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #10000 1'b1;
	liga_expected[2] = #15000 1'b0;
	liga_expected[2] = #5000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #5000 1'b1;
	liga_expected[2] = #10000 1'b0;
	liga_expected[2] = #5000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #10000 1'b1;
	liga_expected[2] = #10000 1'b0;
	liga_expected[2] = #10000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #10000 1'b1;
	liga_expected[2] = #15000 1'b0;
	liga_expected[2] = #5000 1'b1;
	liga_expected[2] = #10000 1'b0;
	liga_expected[2] = #5000 1'b1;
	liga_expected[2] = #10000 1'b0;
	liga_expected[2] = #20000 1'b1;
	liga_expected[2] = #10000 1'b0;
	liga_expected[2] = #5000 1'b1;
	liga_expected[2] = #15000 1'b0;
	liga_expected[2] = #5000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #5000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #20000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #15000 1'b1;
	liga_expected[2] = #25000 1'b0;
	liga_expected[2] = #25000 1'b1;
	liga_expected[2] = #30000 1'b0;
	liga_expected[2] = #10000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #5000 1'b1;
	liga_expected[2] = #10000 1'b0;
	liga_expected[2] = #10000 1'b1;
	liga_expected[2] = #20000 1'b0;
	liga_expected[2] = #10000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #20000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #20000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #10000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #5000 1'b1;
	liga_expected[2] = #10000 1'b0;
	liga_expected[2] = #5000 1'b1;
	liga_expected[2] = #5000 1'b0;
	liga_expected[2] = #5000 1'b1;
	liga_expected[2] = #35000 1'b0;
	liga_expected[2] = #15000 1'b1;
	liga_expected[2] = #15000 1'b0;
	liga_expected[2] = #5000 1'b1;
	liga_expected[2] = #10000 1'b0;
end 
// expected liga[ 1 ]
initial
begin
	liga_expected[1] = 1'b1;
	liga_expected[1] = #20000 1'b0;
	liga_expected[1] = #10000 1'b1;
	liga_expected[1] = #10000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #20000 1'b1;
	liga_expected[1] = #10000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #20000 1'b1;
	liga_expected[1] = #15000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #40000 1'b0;
	liga_expected[1] = #10000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #20000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #10000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #10000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #20000 1'b0;
	liga_expected[1] = #10000 1'b1;
	liga_expected[1] = #10000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #10000 1'b0;
	liga_expected[1] = #10000 1'b1;
	liga_expected[1] = #20000 1'b0;
	liga_expected[1] = #15000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #10000 1'b1;
	liga_expected[1] = #10000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #10000 1'b0;
	liga_expected[1] = #10000 1'b1;
	liga_expected[1] = #15000 1'b0;
	liga_expected[1] = #20000 1'b1;
	liga_expected[1] = #10000 1'b0;
	liga_expected[1] = #20000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #25000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #10000 1'b0;
	liga_expected[1] = #10000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #15000 1'b0;
	liga_expected[1] = #15000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #15000 1'b0;
	liga_expected[1] = #10000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #10000 1'b0;
	liga_expected[1] = #20000 1'b1;
	liga_expected[1] = #35000 1'b0;
	liga_expected[1] = #20000 1'b1;
	liga_expected[1] = #10000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #10000 1'b0;
	liga_expected[1] = #20000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #10000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #10000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #10000 1'b0;
	liga_expected[1] = #30000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #20000 1'b0;
	liga_expected[1] = #10000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #5000 1'b0;
	liga_expected[1] = #5000 1'b1;
	liga_expected[1] = #10000 1'b0;
	liga_expected[1] = #5000 1'b1;
end 
// expected liga[ 0 ]
initial
begin
	liga_expected[0] = 1'b0;
	liga_expected[0] = #15000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #10000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #10000 1'b0;
	liga_expected[0] = #15000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #15000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #35000 1'b1;
	liga_expected[0] = #10000 1'b0;
	liga_expected[0] = #10000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #15000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #10000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #10000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #10000 1'b1;
	liga_expected[0] = #10000 1'b0;
	liga_expected[0] = #10000 1'b1;
	liga_expected[0] = #25000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #10000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #15000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #10000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #20000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #10000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #10000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #10000 1'b0;
	liga_expected[0] = #15000 1'b1;
	liga_expected[0] = #15000 1'b0;
	liga_expected[0] = #10000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #20000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #15000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #40000 1'b1;
	liga_expected[0] = #15000 1'b0;
	liga_expected[0] = #15000 1'b1;
	liga_expected[0] = #25000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #10000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #10000 1'b1;
	liga_expected[0] = #15000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #20000 1'b1;
	liga_expected[0] = #10000 1'b0;
	liga_expected[0] = #15000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #10000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #15000 1'b0;
	liga_expected[0] = #15000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #25000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #10000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #10000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #5000 1'b0;
	liga_expected[0] = #15000 1'b1;
	liga_expected[0] = #15000 1'b0;
	liga_expected[0] = #5000 1'b1;
	liga_expected[0] = #20000 1'b0;
	liga_expected[0] = #5000 1'b1;
end 
// expected prueba[ 2 ]
initial
begin
	prueba_expected[2] = 1'bX;
end 
// expected prueba[ 1 ]
initial
begin
	prueba_expected[1] = 1'bX;
end 
// expected prueba[ 0 ]
initial
begin
	prueba_expected[0] = 1'bX;
end 
// expected Salida[ 4 ]
initial
begin
	Salida_expected[4] = 1'bX;
end 
// expected Salida[ 3 ]
initial
begin
	Salida_expected[3] = 1'bX;
end 
// expected Salida[ 2 ]
initial
begin
	Salida_expected[2] = 1'bX;
end 
// expected Salida[ 1 ]
initial
begin
	Salida_expected[1] = 1'bX;
end 
// expected Salida[ 0 ]
initial
begin
	Salida_expected[0] = 1'bX;
end 
// generate trigger
always @(edoPresente_expected or edoPresente or liga_expected or liga or prueba_expected or prueba or Salida_expected or Salida)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected edoPresente = %b | expected liga = %b | expected prueba = %b | expected Salida = %b | ",edoPresente_expected_prev,liga_expected_prev,prueba_expected_prev,Salida_expected_prev);
	$display("| real edoPresente = %b | real liga = %b | real prueba = %b | real Salida = %b | ",edoPresente_prev,liga_prev,prueba_prev,Salida_prev);
`endif
	if (
		( edoPresente_expected_prev[0] !== 1'bx ) && ( edoPresente_prev[0] !== edoPresente_expected_prev[0] )
		&& ((edoPresente_expected_prev[0] !== last_edoPresente_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port edoPresente[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", edoPresente_expected_prev);
		$display ("     Real value = %b", edoPresente_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_edoPresente_exp[0] = edoPresente_expected_prev[0];
	end
	if (
		( edoPresente_expected_prev[1] !== 1'bx ) && ( edoPresente_prev[1] !== edoPresente_expected_prev[1] )
		&& ((edoPresente_expected_prev[1] !== last_edoPresente_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port edoPresente[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", edoPresente_expected_prev);
		$display ("     Real value = %b", edoPresente_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_edoPresente_exp[1] = edoPresente_expected_prev[1];
	end
	if (
		( edoPresente_expected_prev[2] !== 1'bx ) && ( edoPresente_prev[2] !== edoPresente_expected_prev[2] )
		&& ((edoPresente_expected_prev[2] !== last_edoPresente_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port edoPresente[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", edoPresente_expected_prev);
		$display ("     Real value = %b", edoPresente_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_edoPresente_exp[2] = edoPresente_expected_prev[2];
	end
	if (
		( liga_expected_prev[0] !== 1'bx ) && ( liga_prev[0] !== liga_expected_prev[0] )
		&& ((liga_expected_prev[0] !== last_liga_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port liga[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", liga_expected_prev);
		$display ("     Real value = %b", liga_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_liga_exp[0] = liga_expected_prev[0];
	end
	if (
		( liga_expected_prev[1] !== 1'bx ) && ( liga_prev[1] !== liga_expected_prev[1] )
		&& ((liga_expected_prev[1] !== last_liga_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port liga[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", liga_expected_prev);
		$display ("     Real value = %b", liga_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_liga_exp[1] = liga_expected_prev[1];
	end
	if (
		( liga_expected_prev[2] !== 1'bx ) && ( liga_prev[2] !== liga_expected_prev[2] )
		&& ((liga_expected_prev[2] !== last_liga_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port liga[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", liga_expected_prev);
		$display ("     Real value = %b", liga_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_liga_exp[2] = liga_expected_prev[2];
	end
	if (
		( prueba_expected_prev[0] !== 1'bx ) && ( prueba_prev[0] !== prueba_expected_prev[0] )
		&& ((prueba_expected_prev[0] !== last_prueba_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prueba[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prueba_expected_prev);
		$display ("     Real value = %b", prueba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_prueba_exp[0] = prueba_expected_prev[0];
	end
	if (
		( prueba_expected_prev[1] !== 1'bx ) && ( prueba_prev[1] !== prueba_expected_prev[1] )
		&& ((prueba_expected_prev[1] !== last_prueba_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prueba[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prueba_expected_prev);
		$display ("     Real value = %b", prueba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_prueba_exp[1] = prueba_expected_prev[1];
	end
	if (
		( prueba_expected_prev[2] !== 1'bx ) && ( prueba_prev[2] !== prueba_expected_prev[2] )
		&& ((prueba_expected_prev[2] !== last_prueba_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prueba[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prueba_expected_prev);
		$display ("     Real value = %b", prueba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_prueba_exp[2] = prueba_expected_prev[2];
	end
	if (
		( Salida_expected_prev[0] !== 1'bx ) && ( Salida_prev[0] !== Salida_expected_prev[0] )
		&& ((Salida_expected_prev[0] !== last_Salida_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Salida[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Salida_expected_prev);
		$display ("     Real value = %b", Salida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Salida_exp[0] = Salida_expected_prev[0];
	end
	if (
		( Salida_expected_prev[1] !== 1'bx ) && ( Salida_prev[1] !== Salida_expected_prev[1] )
		&& ((Salida_expected_prev[1] !== last_Salida_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Salida[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Salida_expected_prev);
		$display ("     Real value = %b", Salida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Salida_exp[1] = Salida_expected_prev[1];
	end
	if (
		( Salida_expected_prev[2] !== 1'bx ) && ( Salida_prev[2] !== Salida_expected_prev[2] )
		&& ((Salida_expected_prev[2] !== last_Salida_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Salida[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Salida_expected_prev);
		$display ("     Real value = %b", Salida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Salida_exp[2] = Salida_expected_prev[2];
	end
	if (
		( Salida_expected_prev[3] !== 1'bx ) && ( Salida_prev[3] !== Salida_expected_prev[3] )
		&& ((Salida_expected_prev[3] !== last_Salida_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Salida[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Salida_expected_prev);
		$display ("     Real value = %b", Salida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Salida_exp[3] = Salida_expected_prev[3];
	end
	if (
		( Salida_expected_prev[4] !== 1'bx ) && ( Salida_prev[4] !== Salida_expected_prev[4] )
		&& ((Salida_expected_prev[4] !== last_Salida_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Salida[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Salida_expected_prev);
		$display ("     Real value = %b", Salida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Salida_exp[4] = Salida_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Practica4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg AUX;
reg CLK;
reg RESET;
reg W;
reg X;
reg Y;
reg Z;
// wires                                               
wire [2:0] edoPresente;
wire [2:0] liga;
wire [2:0] prueba;
wire [4:0] Salida;

wire sampler;                             

// assign statements (if any)                          
Practica4 i1 (
// port map - connection between master ports and signals/registers   
	.AUX(AUX),
	.CLK(CLK),
	.edoPresente(edoPresente),
	.liga(liga),
	.prueba(prueba),
	.RESET(RESET),
	.Salida(Salida),
	.W(W),
	.X(X),
	.Y(Y),
	.Z(Z)
);

// AUX
initial
begin
	AUX = 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// RESET
initial
begin
	RESET = 1'b0;
end 

// W
initial
begin
	W = 1'b1;
end 

// X
always
begin
	X = 1'b0;
	X = #5000 1'b1;
	#5000;
end 

// Y
initial
begin
	Y = 1'b0;
end 

// Z
always
begin
	Z = 1'b0;
	Z = #5000 1'b1;
	#5000;
end 

Practica4_vlg_sample_tst tb_sample (
	.AUX(AUX),
	.CLK(CLK),
	.RESET(RESET),
	.W(W),
	.X(X),
	.Y(Y),
	.Z(Z),
	.sampler_tx(sampler)
);

Practica4_vlg_check_tst tb_out(
	.edoPresente(edoPresente),
	.liga(liga),
	.prueba(prueba),
	.Salida(Salida),
	.sampler_rx(sampler)
);
endmodule

